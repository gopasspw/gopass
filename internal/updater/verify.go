package updater

import (
	"bufio"
	"bytes"
	"encoding/hex"
	"fmt"
	"strings"

	"github.com/gopasspw/gopass/pkg/debug"
	"golang.org/x/crypto/openpgp"
)

var pubkey = []byte(`
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=EERM
-----END PGP PUBLIC KEY BLOCK-----
`)

func gpgVerify(data, sig []byte) (bool, error) {
	keyring, err := openpgp.ReadArmoredKeyRing(bytes.NewReader(pubkey))
	if err != nil {
		debug.Log("failed to read public key: %q", err)
		return false, err
	}

	_, err = openpgp.CheckArmoredDetachedSignature(keyring, bytes.NewReader(data), bytes.NewReader(sig))
	if err != nil {
		debug.Log("failed to validate detached GPG signature: %q", err)
		debug.Log("data: %q", string(data))
		debug.Log("sig: %q", string(sig))
		return false, err
	}
	return true, nil
}

// retrieve the hash for the given filename from a checksum file
func findHashForFile(buf []byte, filename string) ([]byte, error) {
	s := bufio.NewScanner(bytes.NewReader(buf))
	for s.Scan() {
		p := strings.Split(s.Text(), "  ")
		if len(p) < 2 {
			continue
		}
		if p[1] != filename {
			continue
		}
		h, err := hex.DecodeString(p[0])
		if err != nil {
			return nil, err
		}
		return h, nil
	}

	return nil, fmt.Errorf("hash for file %q not found", filename)
}
