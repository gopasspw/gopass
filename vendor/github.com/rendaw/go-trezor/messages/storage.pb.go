// Code generated by protoc-gen-go. DO NOT EDIT.
// source: storage.proto

package messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// Internal persistent storage of device
type Storage struct {
	Version              *uint32     `protobuf:"varint,1,req,name=version" json:"version,omitempty"`
	Node                 *HDNodeType `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Mnemonic             *string     `protobuf:"bytes,3,opt,name=mnemonic" json:"mnemonic,omitempty"`
	PassphraseProtection *bool       `protobuf:"varint,4,opt,name=passphrase_protection,json=passphraseProtection" json:"passphrase_protection,omitempty"`
	PinFailedAttempts    *uint32     `protobuf:"varint,5,opt,name=pin_failed_attempts,json=pinFailedAttempts" json:"pin_failed_attempts,omitempty"`
	Pin                  *string     `protobuf:"bytes,6,opt,name=pin" json:"pin,omitempty"`
	Language             *string     `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
	Label                *string     `protobuf:"bytes,8,opt,name=label" json:"label,omitempty"`
	Imported             *bool       `protobuf:"varint,9,opt,name=imported" json:"imported,omitempty"`
	Homescreen           []byte      `protobuf:"bytes,10,opt,name=homescreen" json:"homescreen,omitempty"`
	U2FCounter           *uint32     `protobuf:"varint,11,opt,name=u2f_counter,json=u2fCounter" json:"u2f_counter,omitempty"`
	NeedsBackup          *bool       `protobuf:"varint,12,opt,name=needs_backup,json=needsBackup" json:"needs_backup,omitempty"`
	Flags                *uint32     `protobuf:"varint,13,opt,name=flags" json:"flags,omitempty"`
	U2Froot              *HDNodeType `protobuf:"bytes,14,opt,name=u2froot" json:"u2froot,omitempty"`
	XXX_unrecognized     []byte      `json:"-"`
}

func (m *Storage) Reset()                    { *m = Storage{} }
func (m *Storage) String() string            { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()               {}
func (*Storage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Storage) GetVersion() uint32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *Storage) GetNode() *HDNodeType {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Storage) GetMnemonic() string {
	if m != nil && m.Mnemonic != nil {
		return *m.Mnemonic
	}
	return ""
}

func (m *Storage) GetPassphraseProtection() bool {
	if m != nil && m.PassphraseProtection != nil {
		return *m.PassphraseProtection
	}
	return false
}

func (m *Storage) GetPinFailedAttempts() uint32 {
	if m != nil && m.PinFailedAttempts != nil {
		return *m.PinFailedAttempts
	}
	return 0
}

func (m *Storage) GetPin() string {
	if m != nil && m.Pin != nil {
		return *m.Pin
	}
	return ""
}

func (m *Storage) GetLanguage() string {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return ""
}

func (m *Storage) GetLabel() string {
	if m != nil && m.Label != nil {
		return *m.Label
	}
	return ""
}

func (m *Storage) GetImported() bool {
	if m != nil && m.Imported != nil {
		return *m.Imported
	}
	return false
}

func (m *Storage) GetHomescreen() []byte {
	if m != nil {
		return m.Homescreen
	}
	return nil
}

func (m *Storage) GetU2FCounter() uint32 {
	if m != nil && m.U2FCounter != nil {
		return *m.U2FCounter
	}
	return 0
}

func (m *Storage) GetNeedsBackup() bool {
	if m != nil && m.NeedsBackup != nil {
		return *m.NeedsBackup
	}
	return false
}

func (m *Storage) GetFlags() uint32 {
	if m != nil && m.Flags != nil {
		return *m.Flags
	}
	return 0
}

func (m *Storage) GetU2Froot() *HDNodeType {
	if m != nil {
		return m.U2Froot
	}
	return nil
}

func init() {
	proto.RegisterType((*Storage)(nil), "Storage")
}

func init() { proto.RegisterFile("storage.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x6b, 0xdb, 0x30,
	0x18, 0xc6, 0x71, 0xfe, 0xcc, 0xc9, 0xeb, 0x78, 0x6c, 0x5a, 0x06, 0x22, 0x87, 0xc5, 0xdb, 0x18,
	0xf8, 0xe4, 0x83, 0xb7, 0x2f, 0xb0, 0xb4, 0x94, 0x9e, 0x4a, 0x71, 0x73, 0x37, 0xb2, 0xfd, 0xda,
	0x11, 0xb5, 0x25, 0x21, 0xc9, 0x85, 0xf4, 0x03, 0xf6, 0x73, 0x15, 0xcb, 0x49, 0x5a, 0xe8, 0xcd,
	0xbf, 0xe7, 0x87, 0x78, 0x1e, 0xfc, 0x42, 0x68, 0xac, 0xd4, 0xac, 0xc1, 0x44, 0x69, 0x69, 0xe5,
	0x26, 0xb0, 0x47, 0x85, 0x66, 0x84, 0x5f, 0x2f, 0x53, 0xf0, 0x1f, 0x46, 0x4d, 0x28, 0xf8, 0x4f,
	0xa8, 0x0d, 0x97, 0x82, 0x7a, 0xd1, 0x24, 0x0e, 0xb3, 0x33, 0x92, 0x2d, 0xcc, 0x84, 0xac, 0x90,
	0x4e, 0x22, 0x2f, 0x0e, 0xd2, 0x20, 0xb9, 0xbd, 0xbe, 0x93, 0x15, 0xee, 0x8f, 0x0a, 0x33, 0x27,
	0xc8, 0x06, 0x16, 0x9d, 0xc0, 0x4e, 0x0a, 0x5e, 0xd2, 0x69, 0xe4, 0xc5, 0xcb, 0xec, 0xc2, 0xe4,
	0x2f, 0x7c, 0x57, 0xcc, 0x18, 0x75, 0xd0, 0xcc, 0x60, 0x3e, 0xd4, 0x62, 0x69, 0x87, 0x92, 0x59,
	0xe4, 0xc5, 0x8b, 0x6c, 0xfd, 0x26, 0xef, 0x2f, 0x8e, 0x24, 0xf0, 0x4d, 0x71, 0x91, 0xd7, 0x8c,
	0xb7, 0x58, 0xe5, 0xcc, 0x5a, 0xec, 0x94, 0x35, 0x74, 0x1e, 0x79, 0x71, 0x98, 0x7d, 0x55, 0x5c,
	0xdc, 0x38, 0xf3, 0xff, 0x24, 0xc8, 0x17, 0x98, 0x2a, 0x2e, 0xe8, 0x27, 0xd7, 0x3d, 0x7c, 0x0e,
	0x93, 0x5a, 0x26, 0x9a, 0x9e, 0x35, 0x48, 0xfd, 0x71, 0xd2, 0x99, 0xc9, 0x1a, 0xe6, 0x2d, 0x2b,
	0xb0, 0xa5, 0x0b, 0x27, 0x46, 0x18, 0x5e, 0xf0, 0x4e, 0x49, 0x6d, 0xb1, 0xa2, 0x4b, 0xb7, 0xed,
	0xc2, 0xe4, 0x07, 0xc0, 0x41, 0x76, 0x68, 0x4a, 0x8d, 0x28, 0x28, 0x44, 0x5e, 0xbc, 0xca, 0xde,
	0x25, 0x64, 0x0b, 0x41, 0x9f, 0xd6, 0x79, 0x29, 0x7b, 0x61, 0x51, 0xd3, 0xc0, 0xed, 0x84, 0x3e,
	0xad, 0xaf, 0xc6, 0x84, 0xfc, 0x84, 0x95, 0x40, 0xac, 0x4c, 0x5e, 0xb0, 0xf2, 0xb1, 0x57, 0x74,
	0xe5, 0x0a, 0x02, 0x97, 0xed, 0x5c, 0x34, 0xac, 0xaa, 0x5b, 0xd6, 0x18, 0x1a, 0xba, 0xd7, 0x23,
	0x90, 0x3f, 0xe0, 0xf7, 0x69, 0xad, 0xa5, 0xb4, 0xf4, 0xf3, 0xc7, 0xdf, 0x7f, 0x76, 0xbb, 0x7f,
	0xf0, 0xbb, 0x94, 0x5d, 0x62, 0x98, 0x95, 0xe6, 0xc0, 0x5b, 0x56, 0x98, 0xc4, 0x6a, 0x7c, 0x96,
	0x3a, 0x69, 0x79, 0x31, 0x1e, 0xbb, 0xe8, 0xeb, 0x5d, 0xb8, 0x77, 0xe1, 0xe9, 0xe4, 0xaf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xaf, 0x2f, 0x7e, 0x46, 0x1b, 0x02, 0x00, 0x00,
}
