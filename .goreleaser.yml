# goreleaser.yml
# Release automation
#
# Build customization
project_name: gopass

before:
  hooks:
    - make clean
    - make completion
    - go mod download

builds:
  - id: gopass
    binary: gopass
    flags:
      - -trimpath -tags netgo
    env:
      - CGO_ENABLED=0
    asmflags:
      - all=-trimpath={{.Env.GOPATH}}
    gcflags:
      - all=-trimpath={{.Env.GOPATH}}
    ldflags: |
      -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.CommitDate}} -extldflags '-static'
    goos:
      - darwin
      - freebsd
      - linux
      - openbsd
      - windows
    goarch:
      - amd64
      - arm
      - arm64
    goarm:
      - 6
      - 7
    mod_timestamp: '{{ .CommitTimestamp }}'
  - id: gopass-git-credentials
    dir: cmd/gopass-git-credentials
    binary: gopass-git-credentials
    flags:
      - -trimpath -tags netgo
    env:
      - CGO_ENABLED=0
    asmflags:
      - all=-trimpath={{.Env.GOPATH}}
    gcflags:
      - all=-trimpath={{.Env.GOPATH}}
    ldflags: |
      -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.CommitDate}} -extldflags '-static'
    goos:
      - darwin
      - linux
      - windows
    goarch:
      - amd64
    mod_timestamp: '{{ .CommitTimestamp }}'
  - id: gopass-hibp
    dir: cmd/gopass-hibp
    binary: gopass-hibp
    flags:
      - -trimpath
    env:
      - CGO_ENABLED=0
    asmflags:
      - all=-trimpath={{.Env.GOPATH}}
    gcflags:
      - all=-trimpath={{.Env.GOPATH}}
    ldflags: |
      -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.CommitDate}} -extldflags '-static'
    goos:
      - darwin
      - linux
      - windows
    goarch:
      - amd64
    mod_timestamp: '{{ .CommitTimestamp }}'
  - id: gopass-jsonapi
    dir: cmd/gopass-jsonapi
    binary: gopass-jsonapi
    flags:
      - -trimpath -tags netgo
    env:
      - CGO_ENABLED=0
    asmflags:
      - all=-trimpath={{.Env.GOPATH}}
    gcflags:
      - all=-trimpath={{.Env.GOPATH}}
    ldflags: |
      -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.CommitDate}} -extldflags '-static'
    goos:
      - darwin
      - linux
      - windows
    goarch:
      - amd64
    mod_timestamp: '{{ .CommitTimestamp }}'
  - id: gopass-summon-provider
    dir: cmd/gopass-summon-provider
    binary: gopass-summon-provider
    flags:
      - -trimpath -tags netgo
    env:
      - CGO_ENABLED=0
    asmflags:
      - all=-trimpath={{.Env.GOPATH}}
    gcflags:
      - all=-trimpath={{.Env.GOPATH}}
    ldflags: |
      -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.CommitDate}} -extldflags '-static'
    goos:
      - darwin
      - linux
      - windows
    goarch:
      - amd64
    mod_timestamp: '{{ .CommitTimestamp }}'
archives:
  - id: gopass
    name_template: "{{.Binary}}-{{.Version}}-{{.Os}}-{{.Arch}}{{ if .Arm }}v{{.Arm }}{{ end }}"
    format: tar.gz
    format_overrides:
      - goos: windows
        format: zip
    files:
      - CHANGELOG.md
      - LICENSE
      - README.md
      - bash.completion
      - fish.completion
      - zsh.completion

release:
  github:
    owner: gopasspw
    name: gopass
  draft: false
  prerelease: auto

brews:
  - name: gopass
    tap:
      owner: gopasspw
      name: homebrew-gopass
    caveats:  |
      Gopass has been installed, have fun!
      If upgrading from `pass`, everything should work as expected.
      If installing from scratch, you need to either initialize a new repository now...
        gopass init
      ...or clone one from a source:
        gopass clone git@code.example.com:example/pass.git
      In order to use the great autocompletion features (they're helpful with gopass),
      please make sure you have autocompletion for homebrew enabled:
        https://github.com/bobthecow/git-flow-completion/wiki/Install-Bash-git-completion
      More information:
        https://www.gopass.pw/
        https://github.com/gopasspw/gopass/README.md
    homepage: "https://www.gopass.pw/"
    description: "The slightly more awesome Standard Unix Password Manager for Teams."
    dependencies:
      - git
      - gnupg
      - terminal-notifier
    install:  |
      ENV["GOPATH"] = buildpath
      (buildpath/"src/github.com/gopasspw/gopass").install buildpath.children

      cd "src/github.com/gopasspw/gopass" do
        ENV["PREFIX"] = prefix
        system "make", "install"
      end

      system bin/"gopass completion bash > bash_completion.bash"
      system bin/"gopass completion zsh > zsh_completion.zsh"
      bash_completion.install "bash_completion.bash"
      zsh_completion.install "zsh_completion.zsh"
    test:  |
      assert_match version.to_s, shell_output("#{bin}/gopass version")
nfpms:
  - id: gopass
    vendor: Gopass Authors
    homepage: "https://www.gopass.pw"
    maintainer: "Gopass Authors <gopass@gopass.pw>"
    license: MIT
    formats:
      - deb
      - rpm
    dependencies:
      - git
      - gnupg2
    recommends:
      - rng-tools
source:
  enabled: true
  name_template: "{{.ProjectName}}-{{.Version}}"
  
checksum:
  name_template: "{{.ProjectName}}_{{.Version}}_SHA256SUMS"

milestones:
  -
    repo:
      owner: gopasspw
      name: gopass
    close: true
    fail_on_error: false
    name_template: "{{ .Major }}.{{ .Minor }}.{{ .Patch }}"
